AWSTemplateFormatVersion: "2010-09-09"
Description: API Gateway with basic Lambda endpoints


Resources:
  RestAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ProtocolType: HTTP
      Name: !Sub "${AWS::StackName}-api"

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref RestAPI
      StageName: live
    DependsOn: RestAPI

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref RestAPI
      StageName: live
    DependsOn:
      - Stage
      # Need all routes built before doing a deployment
      - DefaultRoute

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RestAPI
      RouteKey: "GET /"
      Target: !Join [/, [integrations, !Ref DefaultTarget]]

    DependsOn:
      - RestAPI
      - DefaultTarget

  DefaultTarget:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RestAPI
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: 2.0
      IntegrationUri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaEndpoint.Arn}/invocations'
    DependsOn: 
      - RestAPI
      - LambdaEndpoint

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaEndpoint.Arn
      Principal: apigateway.amazonaws.com
      # SourceArn: !GetAtt RestAPI.Arn
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*'
    DependsOn:
      - RestAPI
      - LambdaEndpoint

  LambdaEndpoint:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          def lambda_handler(event, context):
              print(json.dumps(event))
              return {
                  "statusCode": 200, 
                  "body": "hello world", 
              }
    DependsOn:
      - LambdaRole

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    DependsOn: 
      - RestAPI

Outputs:
  Url:
    Description: Deployed API stage
    Value: !Sub 'https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
